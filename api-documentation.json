{
  "title": "API Documentation",
  "generated": "2025-08-13T19:46:32.923Z",
  "summary": {
    "totalEndpoints": 132,
    "totalMockFiles": 6,
    "totalHooks": 4,
    "totalContexts": 4
  },
  "endpoints": {
    "auth.js": {
      "functions": [
        {
          "name": "authAPI",
          "signature": "",
          "type": "export",
          "file": "auth.js",
          "fullMatch": "export const authAPI ="
        }
      ],
      "endpoints": [
        {
          "url": "/api/profile",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "auth.js",
          "fullCall": "await client.get(\"/api/profile\")"
        },
        {
          "url": "/api/profile",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", data",
          "file": "auth.js",
          "fullCall": "await client.put(\"/api/profile\", data)"
        },
        {
          "url": "avatar",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", file",
          "file": "auth.js",
          "fullCall": "append(\"avatar\", file)"
        },
        {
          "url": "/api/profile/avatar",
          "method": "POST",
          "methodName": "post",
          "parameters": ", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    }",
          "file": "auth.js",
          "fullCall": "await client.post(\"/api/profile/avatar\", formData, { headers: { \"Content-Type\": \"multipart/form-data\", }, })"
        },
        {
          "url": "/api/invite/validate",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      invite_code: inviteCode,\n    }",
          "file": "auth.js",
          "fullCall": "await client.post(\"/api/invite/validate\", { invite_code: inviteCode, })"
        },
        {
          "url": "/api/invite/join",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      invite_code: inviteCode,\n    }",
          "file": "auth.js",
          "fullCall": "await client.post(\"/api/invite/join\", { invite_code: inviteCode, })"
        },
        {
          "url": "/api/auth/refresh",
          "method": "POST",
          "methodName": "post",
          "parameters": "",
          "file": "auth.js",
          "fullCall": "await client.post(\"/api/auth/refresh\")"
        },
        {
          "url": "/api/auth/logout",
          "method": "POST",
          "methodName": "post",
          "parameters": "",
          "file": "auth.js",
          "fullCall": "await client.post(\"/api/auth/logout\")"
        }
      ]
    },
    "chat.js": {
      "functions": [
        {
          "name": "chatAPI",
          "signature": "",
          "type": "export",
          "file": "chat.js",
          "fullMatch": "export const chatAPI ="
        }
      ],
      "endpoints": [
        {
          "url": "page",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.page",
          "file": "chat.js",
          "fullCall": "append('page', options.page)"
        },
        {
          "url": "limit",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.limit",
          "file": "chat.js",
          "fullCall": "append('limit', options.limit)"
        },
        {
          "url": "before",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.before",
          "file": "chat.js",
          "fullCall": "append('before', options.before)"
        },
        {
          "url": "after",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.after",
          "file": "chat.js",
          "fullCall": "append('after', options.after)"
        },
        {
          "url": "/api/households/${householdId}/messages",
          "method": "POST",
          "methodName": "post",
          "parameters": ", data",
          "file": "chat.js",
          "fullCall": "await client.post(`/api/households/${householdId}/messages`, data)"
        },
        {
          "url": "/api/messages/${messageId}",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", data",
          "file": "chat.js",
          "fullCall": "await client.put(`/api/messages/${messageId}`, data)"
        },
        {
          "url": "/api/messages/${messageId}",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "await client.delete(`/api/messages/${messageId}`)"
        },
        {
          "url": "/api/polls/${pollId}/vote",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      selected_options: selectedOptions,\n    }",
          "file": "chat.js",
          "fullCall": "await client.post(`/api/polls/${pollId}/vote`, { selected_options: selectedOptions, })"
        },
        {
          "url": "/api/polls/${pollId}/results",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "await client.get(`/api/polls/${pollId}/results`)"
        },
        {
          "url": "file",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", file",
          "file": "chat.js",
          "fullCall": "append('file', file)"
        },
        {
          "url": "message_data",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", JSON.stringify(messageData",
          "file": "chat.js",
          "fullCall": "append('message_data', JSON.stringify(messageData)"
        },
        {
          "url": "/api/households/${householdId}/messages/upload",
          "method": "POST",
          "methodName": "post",
          "parameters": ",\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }",
          "file": "chat.js",
          "fullCall": "await client.post( `/api/households/${householdId}/messages/upload`, formData, { headers: { 'Content-Type': 'multipart/form-data', }, } )"
        },
        {
          "url": "/api/households/${householdId}/messages/search?${params.toString()}",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "await client.get( `/api/households/${householdId}/messages/search?${params.toString()}` )"
        },
        {
          "url": "/api/messages/${messageId}/thread",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "await client.get(`/api/messages/${messageId}/thread`)"
        },
        {
          "url": "/api/messages/${messageId}/react",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      reaction,\n    }",
          "file": "chat.js",
          "fullCall": "await client.post(`/api/messages/${messageId}/react`, { reaction, })"
        },
        {
          "url": "/api/messages/${messageId}/react",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": ", {\n      data: { reaction },\n    }",
          "file": "chat.js",
          "fullCall": "await client.delete(`/api/messages/${messageId}/react`, { data: { reaction }, })"
        },
        {
          "url": "/api/households/${householdId}/messages?${queryString}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/households/${householdId}/messages?${queryString}`"
        },
        {
          "url": "/api/households/${householdId}/messages",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/households/${householdId}/messages`"
        },
        {
          "url": "/api/households/${householdId}/messages",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/households/${householdId}/messages`"
        },
        {
          "url": "/api/messages/${messageId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/messages/${messageId}`"
        },
        {
          "url": "/api/messages/${messageId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/messages/${messageId}`"
        },
        {
          "url": "/api/polls/${pollId}/vote",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/polls/${pollId}/vote`"
        },
        {
          "url": "/api/polls/${pollId}/results",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/polls/${pollId}/results`"
        },
        {
          "url": "/api/households/${householdId}/messages/upload",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/households/${householdId}/messages/upload`"
        },
        {
          "url": "/api/households/${householdId}/messages/search?${params.toString()}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/households/${householdId}/messages/search?${params.toString()}`"
        },
        {
          "url": "/api/messages/${messageId}/thread",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/messages/${messageId}/thread`"
        },
        {
          "url": "/api/messages/${messageId}/react",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/messages/${messageId}/react`"
        },
        {
          "url": "/api/messages/${messageId}/react",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "chat.js",
          "fullCall": "`/api/messages/${messageId}/react`"
        }
      ]
    },
    "client.js": {
      "functions": [],
      "endpoints": [
        {
          "url": "Invalid API response structure",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "client.js",
          "fullCall": "Error(\"Invalid API response structure\")"
        },
        {
          "url": "API Request Error:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "client.js",
          "fullCall": "error(\"API Request Error:\", error)"
        }
      ]
    },
    "expenses.js": {
      "functions": [
        {
          "name": "expensesAPI",
          "signature": "",
          "type": "export",
          "file": "expenses.js",
          "fullMatch": "export const expensesAPI ="
        }
      ],
      "endpoints": [
        {
          "url": "status",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.status",
          "file": "expenses.js",
          "fullCall": "append('status', filters.status)"
        },
        {
          "url": "category",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.category",
          "file": "expenses.js",
          "fullCall": "append('category', filters.category)"
        },
        {
          "url": "paid_by",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.paid_by",
          "file": "expenses.js",
          "fullCall": "append('paid_by', filters.paid_by)"
        },
        {
          "url": "due_date_from",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.due_date_from",
          "file": "expenses.js",
          "fullCall": "append('due_date_from', filters.due_date_from)"
        },
        {
          "url": "due_date_to",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.due_date_to",
          "file": "expenses.js",
          "fullCall": "append('due_date_to', filters.due_date_to)"
        },
        {
          "url": "/api/households/${householdId}/bills",
          "method": "POST",
          "methodName": "post",
          "parameters": ", data",
          "file": "expenses.js",
          "fullCall": "await client.post(`/api/households/${householdId}/bills`, data)"
        },
        {
          "url": "/api/bills/${billId}",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "await client.get(`/api/bills/${billId}`)"
        },
        {
          "url": "/api/bills/${billId}",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", data",
          "file": "expenses.js",
          "fullCall": "await client.put(`/api/bills/${billId}`, data)"
        },
        {
          "url": "/api/bills/${billId}",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "await client.delete(`/api/bills/${billId}`)"
        },
        {
          "url": "/api/bills/${billId}/split",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", {\n      splits,\n    }",
          "file": "expenses.js",
          "fullCall": "await client.put(`/api/bills/${billId}/split`, { splits, })"
        },
        {
          "url": "/api/bills/${billId}/pay",
          "method": "POST",
          "methodName": "post",
          "parameters": ", data",
          "file": "expenses.js",
          "fullCall": "await client.post(`/api/bills/${billId}/pay`, data)"
        },
        {
          "url": "/api/households/${householdId}/balances",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "await client.get(`/api/households/${householdId}/balances`)"
        },
        {
          "url": "/api/households/${householdId}/balances/${userId}",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "await client.get(`/api/households/${householdId}/balances/${userId}`)"
        },
        {
          "url": "/api/bills/batch/pay",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      payments, // [{ bill_id, split_id, amount, paid_date }]\n    }",
          "file": "expenses.js",
          "fullCall": "await client.post('/api/bills/batch/pay', { payments, // [{ bill_id, split_id, amount, paid_date }] })"
        },
        {
          "url": "/api/households/${householdId}/settlement",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "await client.get(`/api/households/${householdId}/settlement`)"
        },
        {
          "url": "/api/households/${householdId}/settlement",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      settlements, // [{ from_user_id, to_user_id, amount }]\n    }",
          "file": "expenses.js",
          "fullCall": "await client.post(`/api/households/${householdId}/settlement`, { settlements, // [{ from_user_id, to_user_id, amount }] })"
        },
        {
          "url": "/api/households/${householdId}/bills/export?${params.toString()}",
          "method": "GET",
          "methodName": "get",
          "parameters": ",\n      { responseType: 'blob' }",
          "file": "expenses.js",
          "fullCall": "await client.get( `/api/households/${householdId}/bills/export?${params.toString()}`, { responseType: 'blob' } )"
        },
        {
          "url": "/api/households/${householdId}/bills?${queryString}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/bills?${queryString}`"
        },
        {
          "url": "/api/households/${householdId}/bills",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/bills`"
        },
        {
          "url": "/api/households/${householdId}/bills",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/bills`"
        },
        {
          "url": "/api/bills/${billId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/bills/${billId}`"
        },
        {
          "url": "/api/bills/${billId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/bills/${billId}`"
        },
        {
          "url": "/api/bills/${billId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/bills/${billId}`"
        },
        {
          "url": "/api/bills/${billId}/split",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/bills/${billId}/split`"
        },
        {
          "url": "/api/bills/${billId}/pay",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/bills/${billId}/pay`"
        },
        {
          "url": "/api/households/${householdId}/balances",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/balances`"
        },
        {
          "url": "/api/households/${householdId}/balances/${userId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/balances/${userId}`"
        },
        {
          "url": "/api/households/${householdId}/settlement",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/settlement`"
        },
        {
          "url": "/api/households/${householdId}/settlement",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/settlement`"
        },
        {
          "url": "/api/households/${householdId}/bills/export?${params.toString()}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "expenses.js",
          "fullCall": "`/api/households/${householdId}/bills/export?${params.toString()}`"
        }
      ]
    },
    "households.js": {
      "functions": [
        {
          "name": "householdsAPI",
          "signature": "",
          "type": "export",
          "file": "households.js",
          "fullMatch": "export const householdsAPI ="
        }
      ],
      "endpoints": [
        {
          "url": "/api/households",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.get(\"/api/households\")"
        },
        {
          "url": "/api/households",
          "method": "POST",
          "methodName": "post",
          "parameters": ", data",
          "file": "households.js",
          "fullCall": "await client.post(\"/api/households\", data)"
        },
        {
          "url": "/api/households/${householdId}",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.get(`/api/households/${householdId}`)"
        },
        {
          "url": "/api/households/${householdId}",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", data",
          "file": "households.js",
          "fullCall": "await client.put(`/api/households/${householdId}`, data)"
        },
        {
          "url": "/api/households/${householdId}",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.delete(`/api/households/${householdId}`)"
        },
        {
          "url": "/api/households/${householdId}/members",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.get(`/api/households/${householdId}/members`)"
        },
        {
          "url": "/api/households/${householdId}/invite",
          "method": "POST",
          "methodName": "post",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.post(`/api/households/${householdId}/invite`)"
        },
        {
          "url": "/api/households/${householdId}/members/${userId}",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.delete(`/api/households/${householdId}/members/${userId}`)"
        },
        {
          "url": "/api/households/${householdId}/leave",
          "method": "POST",
          "methodName": "post",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.post(`/api/households/${householdId}/leave`)"
        },
        {
          "url": "/api/households/${householdId}/dashboard",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "households.js",
          "fullCall": "await client.get(`/api/households/${householdId}/dashboard`)"
        },
        {
          "url": "storage",
          "method": "STORAGEEVENT",
          "methodName": "StorageEvent",
          "parameters": ", {\n        key: \"activeHouseholdId\",\n        newValue: householdId,\n      }",
          "file": "households.js",
          "fullCall": "StorageEvent(\"storage\", { key: \"activeHouseholdId\", newValue: householdId, })"
        },
        {
          "url": "/api/households/${householdId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}`"
        },
        {
          "url": "/api/households/${householdId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}`"
        },
        {
          "url": "/api/households/${householdId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}`"
        },
        {
          "url": "/api/households/${householdId}/members",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}/members`"
        },
        {
          "url": "/api/households/${householdId}/invite",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}/invite`"
        },
        {
          "url": "/api/households/${householdId}/members/${userId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}/members/${userId}`"
        },
        {
          "url": "/api/households/${householdId}/leave",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}/leave`"
        },
        {
          "url": "/api/households/${householdId}/dashboard",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "households.js",
          "fullCall": "`/api/households/${householdId}/dashboard`"
        }
      ]
    },
    "notifications.js": {
      "functions": [
        {
          "name": "notificationsAPI",
          "signature": "",
          "type": "export",
          "file": "notifications.js",
          "fullMatch": "export const notificationsAPI ="
        }
      ],
      "endpoints": [
        {
          "url": "read",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.read",
          "file": "notifications.js",
          "fullCall": "append('read', options.read)"
        },
        {
          "url": "type",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.type",
          "file": "notifications.js",
          "fullCall": "append('type', options.type)"
        },
        {
          "url": "page",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.page",
          "file": "notifications.js",
          "fullCall": "append('page', options.page)"
        },
        {
          "url": "limit",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", options.limit",
          "file": "notifications.js",
          "fullCall": "append('limit', options.limit)"
        },
        {
          "url": "/api/notifications/${notificationId}/read",
          "method": "PUT",
          "methodName": "put",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "await client.put(`/api/notifications/${notificationId}/read`)"
        },
        {
          "url": "/api/notifications/read-all",
          "method": "PUT",
          "methodName": "put",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "await client.put('/api/notifications/read-all')"
        },
        {
          "url": "/api/notifications/${notificationId}",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "await client.delete(`/api/notifications/${notificationId}`)"
        },
        {
          "url": "/api/notifications/unread-count",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "await client.get('/api/notifications/unread-count')"
        },
        {
          "url": "/api/notifications/preferences",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", preferences",
          "file": "notifications.js",
          "fullCall": "await client.put('/api/notifications/preferences', preferences)"
        },
        {
          "url": "/api/notifications/preferences",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "await client.get('/api/notifications/preferences')"
        },
        {
          "url": "/api/notifications/batch/read",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      notification_ids: notificationIds,\n    }",
          "file": "notifications.js",
          "fullCall": "await client.post('/api/notifications/batch/read', { notification_ids: notificationIds, })"
        },
        {
          "url": "/api/notifications/batch/delete",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      notification_ids: notificationIds,\n    }",
          "file": "notifications.js",
          "fullCall": "await client.post('/api/notifications/batch/delete', { notification_ids: notificationIds, })"
        },
        {
          "url": "/api/notifications?${queryString}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "`/api/notifications?${queryString}`"
        },
        {
          "url": "/api/notifications/${notificationId}/read",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "`/api/notifications/${notificationId}/read`"
        },
        {
          "url": "/api/notifications/${notificationId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "notifications.js",
          "fullCall": "`/api/notifications/${notificationId}`"
        }
      ]
    },
    "tasks.js": {
      "functions": [
        {
          "name": "tasksAPI",
          "signature": "",
          "type": "export",
          "file": "tasks.js",
          "fullMatch": "export const tasksAPI ="
        }
      ],
      "endpoints": [
        {
          "url": "status",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.status",
          "file": "tasks.js",
          "fullCall": "append('status', filters.status)"
        },
        {
          "url": "assignee",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.assignee",
          "file": "tasks.js",
          "fullCall": "append('assignee', filters.assignee)"
        },
        {
          "url": "due_date",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.due_date",
          "file": "tasks.js",
          "fullCall": "append('due_date', filters.due_date)"
        },
        {
          "url": "is_recurring",
          "method": "APPEND",
          "methodName": "append",
          "parameters": ", filters.is_recurring",
          "file": "tasks.js",
          "fullCall": "append('is_recurring', filters.is_recurring)"
        },
        {
          "url": "/api/households/${householdId}/tasks",
          "method": "POST",
          "methodName": "post",
          "parameters": ", data",
          "file": "tasks.js",
          "fullCall": "await client.post(`/api/households/${householdId}/tasks`, data)"
        },
        {
          "url": "/api/tasks/${taskId}",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.get(`/api/tasks/${taskId}`)"
        },
        {
          "url": "/api/tasks/${taskId}",
          "method": "PUT",
          "methodName": "put",
          "parameters": ", data",
          "file": "tasks.js",
          "fullCall": "await client.put(`/api/tasks/${taskId}`, data)"
        },
        {
          "url": "/api/tasks/${taskId}",
          "method": "DELETE",
          "methodName": "delete",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.delete(`/api/tasks/${taskId}`)"
        },
        {
          "url": "/api/tasks/${taskId}/assign",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      assigned_to: userIds,\n    }",
          "file": "tasks.js",
          "fullCall": "await client.post(`/api/tasks/${taskId}/assign`, { assigned_to: userIds, })"
        },
        {
          "url": "/api/tasks/${taskId}/complete",
          "method": "PUT",
          "methodName": "put",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.put(`/api/tasks/${taskId}/complete`)"
        },
        {
          "url": "/api/tasks/${taskId}/uncomplete",
          "method": "PUT",
          "methodName": "put",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.put(`/api/tasks/${taskId}/uncomplete`)"
        },
        {
          "url": "/api/tasks/${taskId}/swap/request",
          "method": "POST",
          "methodName": "post",
          "parameters": ", data",
          "file": "tasks.js",
          "fullCall": "await client.post(`/api/tasks/${taskId}/swap/request`, data)"
        },
        {
          "url": "/api/task-swaps/${swapId}/accept",
          "method": "PUT",
          "methodName": "put",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.put(`/api/task-swaps/${swapId}/accept`)"
        },
        {
          "url": "/api/task-swaps/${swapId}/decline",
          "method": "PUT",
          "methodName": "put",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.put(`/api/task-swaps/${swapId}/decline`)"
        },
        {
          "url": "/api/households/${householdId}/task-swaps",
          "method": "GET",
          "methodName": "get",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "await client.get(`/api/households/${householdId}/task-swaps`)"
        },
        {
          "url": "/api/tasks/batch/complete",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      task_ids: taskIds,\n    }",
          "file": "tasks.js",
          "fullCall": "await client.post('/api/tasks/batch/complete', { task_ids: taskIds, })"
        },
        {
          "url": "/api/tasks/batch/assign",
          "method": "POST",
          "methodName": "post",
          "parameters": ", {\n      assignments, // [{ task_id, user_ids }]\n    }",
          "file": "tasks.js",
          "fullCall": "await client.post('/api/tasks/batch/assign', { assignments, // [{ task_id, user_ids }] })"
        },
        {
          "url": "/api/households/${householdId}/tasks?${queryString}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/households/${householdId}/tasks?${queryString}`"
        },
        {
          "url": "/api/households/${householdId}/tasks",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/households/${householdId}/tasks`"
        },
        {
          "url": "/api/households/${householdId}/tasks",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/households/${householdId}/tasks`"
        },
        {
          "url": "/api/tasks/${taskId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}`"
        },
        {
          "url": "/api/tasks/${taskId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}`"
        },
        {
          "url": "/api/tasks/${taskId}",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}`"
        },
        {
          "url": "/api/tasks/${taskId}/assign",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}/assign`"
        },
        {
          "url": "/api/tasks/${taskId}/complete",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}/complete`"
        },
        {
          "url": "/api/tasks/${taskId}/uncomplete",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}/uncomplete`"
        },
        {
          "url": "/api/tasks/${taskId}/swap/request",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/tasks/${taskId}/swap/request`"
        },
        {
          "url": "/api/task-swaps/${swapId}/accept",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/task-swaps/${swapId}/accept`"
        },
        {
          "url": "/api/task-swaps/${swapId}/decline",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/task-swaps/${swapId}/decline`"
        },
        {
          "url": "/api/households/${householdId}/task-swaps",
          "method": "TEMPLATE",
          "methodName": "template",
          "parameters": "",
          "file": "tasks.js",
          "fullCall": "`/api/households/${householdId}/task-swaps`"
        }
      ]
    }
  },
  "mockData": {
    "expenses.js": {
      "householdBalances": {
        "summary": "object",
        "total_owed_to_household": "unknown",
        "total_owed_by_household": "number",
        "net_balance": "unknown",
        "member_balances": "array",
        "user_id": "string",
        "user_name": "string",
        "avatar_url": "string",
        "total_owed": "unknown",
        "total_paid": "unknown",
        "recent_transactions": "array",
        "id": "string",
        "bill_title": "string",
        "amount": "unknown",
        "paid_date": "string"
      }
    },
    "households.js": {
      "dashboardData": {
        "kpis": "object",
        "outstanding_tasks": "number",
        "total_balance_owed": "unknown",
        "upcoming_deadlines": "number",
        "recent_activity_count": "number",
        "calendar_events": "array",
        "id": "string",
        "title": "string",
        "date": "string",
        "type": "string",
        "amount": "unknown",
        "assigned_to": "string",
        "recent_activity": "array",
        "message": "string",
        "timestamp": "string",
        "user": "object",
        "name": "string",
        "avatar_url": "string"
      }
    },
    "messages.js": {},
    "notifications.js": {},
    "tasks.js": {},
    "users.js": {
      "currentUser": {
        "id": "string",
        "email": "string",
        "full_name": "string",
        "avatar_url": "string",
        "phone": "string",
        "created_at": "string",
        "updated_at": "string"
      }
    }
  },
  "responseFormats": {
    "auth-mock.js": {
      "functions": [
        {
          "name": "authMock",
          "signature": "",
          "type": "export",
          "file": "auth-mock.js",
          "fullMatch": "export const authMock ="
        }
      ],
      "mockData": {
        "authMock": {
          "data": "unknown",
          "message": "string"
        }
      }
    },
    "chat-mock.js": {
      "functions": [
        {
          "name": "handleChatMock",
          "signature": "async (method, endpoint, data, options) =>",
          "type": "export",
          "file": "chat-mock.js",
          "fullMatch": "export const handleChatMock = async (method, endpoint, data, options) =>"
        },
        {
          "name": "handleChatMock",
          "signature": "async (method, endpoint, data, options)",
          "type": "async",
          "file": "chat-mock.js",
          "fullMatch": "export const handleChatMock = async (method, endpoint, data, options) =>"
        }
      ],
      "mockData": {}
    },
    "expense-mock.js": {
      "functions": [
        {
          "name": "handleExpenseMock",
          "signature": "async (method, endpoint, data, options) =>",
          "type": "export",
          "file": "expense-mock.js",
          "fullMatch": "export const handleExpenseMock = async (method, endpoint, data, options) =>"
        },
        {
          "name": "handleExpenseMock",
          "signature": "async (method, endpoint, data, options)",
          "type": "async",
          "file": "expense-mock.js",
          "fullMatch": "export const handleExpenseMock = async (method, endpoint, data, options) =>"
        }
      ],
      "mockData": {}
    },
    "household-mock.js": {
      "functions": [
        {
          "name": "householdMock",
          "signature": "",
          "type": "export",
          "file": "household-mock.js",
          "fullMatch": "export const householdMock ="
        }
      ],
      "mockData": {
        "householdMock": {
          "data": "unknown",
          "role": "string",
          "joined_at": "unknown",
          "message": "string"
        }
      }
    },
    "notification-mock.js": {
      "functions": [
        {
          "name": "handleNotificationMock",
          "signature": "async (method, endpoint, data, options) =>",
          "type": "export",
          "file": "notification-mock.js",
          "fullMatch": "export const handleNotificationMock = async (method, endpoint, data, options) =>"
        },
        {
          "name": "handleNotificationMock",
          "signature": "async (method, endpoint, data, options)",
          "type": "async",
          "file": "notification-mock.js",
          "fullMatch": "export const handleNotificationMock = async (method, endpoint, data, options) =>"
        }
      ],
      "mockData": {}
    },
    "task-mock.js": {
      "functions": [
        {
          "name": "handleTaskMock",
          "signature": "async (method, endpoint, data, options) =>",
          "type": "export",
          "file": "task-mock.js",
          "fullMatch": "export const handleTaskMock = async (method, endpoint, data, options) =>"
        },
        {
          "name": "handleTaskMock",
          "signature": "async (method, endpoint, data, options)",
          "type": "async",
          "file": "task-mock.js",
          "fullMatch": "export const handleTaskMock = async (method, endpoint, data, options) =>"
        }
      ],
      "mockData": {}
    }
  },
  "hooks": {
    "useChat.js": {
      "name": "useChat",
      "exports": [
        "useChat",
        "useChat"
      ],
      "apiCalls": [],
      "returnValues": [
        {
          "pages": "array",
          "data": "array"
        },
        {},
        {
          "pages": "array",
          "data": "unknown"
        },
        {
          "pages": "unknown",
          "data": "unknown"
        },
        {},
        {
          "messagePages": "unknown",
          "isLoading": "unknown",
          "isSending": "unknown",
          "isEditing": "unknown",
          "isDeleting": "unknown",
          "isVoting": "unknown",
          "isUploading": "unknown",
          "isSearching": "unknown",
          "isReacting": "unknown",
          "error": "unknown",
          "sendError": "unknown",
          "searchResults": "unknown",
          "messageCount": "unknown",
          "hasMessages": "unknown",
          "unreadCount": "unknown"
        }
      ],
      "callableMethods": [
        "old",
        "firstPage",
        "optimisticMessage",
        "previousMessages",
        "page",
        "messages",
        "isLoading",
        "isPending",
        "isFetchingNextPage",
        "error",
        "hasNextPage",
        "loadMore",
        "sendMessage",
        "sendPoll",
        "replyToMessage",
        "editMessage",
        "deleteMessage",
        "votePoll",
        "uploadFile",
        "searchMessages",
        "reactToMessage",
        "removeReaction",
        "refetchMessages",
        "getMessageById",
        "getReplies",
        "getRecentMessages",
        "length",
        "0",
        {
          "name": "useChat",
          "definition": "const useChat = (options = {}) =>"
        }
      ],
      "stateVariables": []
    },
    "useExpenses.js": {
      "name": "useExpenses",
      "exports": [
        "useExpenses",
        "useExpenses"
      ],
      "apiCalls": [
        {
          "url": "a",
          "method": "CREATEELEMENT",
          "methodName": "createElement",
          "parameters": "",
          "file": "useExpenses.js",
          "fullCall": "createElement('a')"
        },
        {
          "url": "download",
          "method": "SETATTRIBUTE",
          "methodName": "setAttribute",
          "parameters": ", `bills_${activeHouseholdId}_${new Date(",
          "file": "useExpenses.js",
          "fullCall": "setAttribute('download', `bills_${activeHouseholdId}_${new Date()"
        },
        {
          "url": "T",
          "method": "SPLIT",
          "methodName": "split",
          "parameters": "",
          "file": "useExpenses.js",
          "fullCall": "split('T')"
        }
      ],
      "returnValues": [
        {
          "data": "object",
          "summary": "object",
          "total_owed_by_household": "unknown"
        },
        {},
        {
          "bills": "unknown",
          "balances": "unknown",
          "isLoading": "unknown",
          "error": "unknown",
          "isCreatingBill": "unknown",
          "isUpdatingBill": "unknown",
          "isDeletingBill": "unknown",
          "isRecordingPayment": "unknown",
          "isUpdatingSplit": "unknown",
          "isBulkPayment": "unknown",
          "isCalculatingSettlement": "unknown",
          "isRecordingSettlement": "unknown",
          "createBill": "unknown",
          "updateBill": "unknown"
        }
      ],
      "callableMethods": [
        "old",
        "data",
        "summary",
        "amount",
        "previousBalances",
        "null",
        "balancesLoading",
        "billsLoading",
        "balancesError",
        "billsError",
        "isPending",
        "mutateAsync",
        "billId",
        {
          "name": "useExpenses",
          "definition": "const useExpenses = (filters = {}) =>"
        },
        {
          "name": "getBillById",
          "definition": "const getBillById = (billId) =>"
        },
        {
          "name": "getPendingBills",
          "definition": "const getPendingBills = () =>"
        },
        {
          "name": "getOverdueBills",
          "definition": "const getOverdueBills = () =>"
        },
        {
          "name": "getTotalOwed",
          "definition": "const getTotalOwed = () =>"
        },
        {
          "name": "getUserBalance",
          "definition": "const getUserBalance = (userId) =>"
        },
        {
          "name": "exportBills",
          "definition": "const exportBills = async (format = 'csv', exportFilters = {}) =>"
        }
      ],
      "stateVariables": []
    },
    "useTasks.js": {
      "name": "useTasks",
      "exports": [
        "useTasks",
        "useTasks"
      ],
      "apiCalls": [
        {
          "url": "T",
          "method": "SPLIT",
          "methodName": "split",
          "parameters": "",
          "file": "useTasks.js",
          "fullCall": "split('T')"
        }
      ],
      "returnValues": [
        {
          "data": "unknown",
          "status": "string",
          "assignments": "unknown",
          "completed_at": "unknown"
        },
        {},
        {
          "data": "unknown",
          "status": "string",
          "assignments": "unknown",
          "completed_at": "unknown"
        },
        {},
        {
          "tasks": "unknown",
          "swaps": "unknown",
          "isLoading": "unknown",
          "error": "unknown",
          "isCreatingTask": "unknown",
          "isUpdatingTask": "unknown",
          "isDeletingTask": "unknown",
          "isCompletingTask": "unknown",
          "isUncompletingTask": "unknown",
          "isAssigningTask": "unknown",
          "isBatchCompleting": "unknown",
          "isRequestingSwap": "unknown",
          "isAcceptingSwap": "unknown",
          "isDecliningSwap": "unknown",
          "createTask": "unknown",
          "updateTask": "unknown"
        }
      ],
      "callableMethods": [
        "old",
        "task",
        "assignment",
        "previousTasks",
        "completed_at",
        "swapsLoading",
        "tasksLoading",
        "swapsError",
        "tasksError",
        "isPending",
        "mutateAsync",
        "taskId",
        "data",
        {
          "name": "useTasks",
          "definition": "const useTasks = (filters = {}) =>"
        },
        {
          "name": "getTaskById",
          "definition": "const getTaskById = (taskId) =>"
        },
        {
          "name": "getMyTasks",
          "definition": "const getMyTasks = () =>"
        },
        {
          "name": "getPendingTasks",
          "definition": "const getPendingTasks = () =>"
        },
        {
          "name": "getCompletedTasks",
          "definition": "const getCompletedTasks = () =>"
        },
        {
          "name": "getOverdueTasks",
          "definition": "const getOverdueTasks = () =>"
        },
        {
          "name": "getTasksDueToday",
          "definition": "const getTasksDueToday = () =>"
        },
        {
          "name": "getRecurringTasks",
          "definition": "const getRecurringTasks = () =>"
        },
        {
          "name": "getPendingSwapsForMe",
          "definition": "const getPendingSwapsForMe = () =>"
        },
        {
          "name": "getMySwapRequests",
          "definition": "const getMySwapRequests = () =>"
        }
      ],
      "stateVariables": []
    },
    "useRealtime.js": {
      "name": "useRealtime",
      "exports": [
        "useRealtime",
        "useRealtime"
      ],
      "apiCalls": [
        {
          "url": "Real-time features disabled",
          "method": "LOG",
          "methodName": "log",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "log(\"Real-time features disabled\")"
        },
        {
          "url": "@supabase/supabase-js",
          "method": "IMPORT",
          "methodName": "import",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "await import(\"@supabase/supabase-js\")"
        },
        {
          "url": "Supabase environment variables not configured",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "Error(\"Supabase environment variables not configured\")"
        },
        {
          "url": "Failed to initialize Supabase client:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "useRealtime.js",
          "fullCall": "error(\"Failed to initialize Supabase client:\", error)"
        },
        {
          "url": "postgres_changes",
          "method": "ON",
          "methodName": "on",
          "parameters": ",\n          {\n            event: config.event || \"*\",\n            schema: config.schema || \"public\",\n            table: config.table,\n            filter: config.filter,\n          },\n          (payload",
          "file": "useRealtime.js",
          "fullCall": "on( \"postgres_changes\", { event: config.event || \"*\", schema: config.schema || \"public\", table: config.table, filter: config.filter, }, (payload)"
        },
        {
          "url": "Error handling realtime data:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "useRealtime.js",
          "fullCall": "error(\"Error handling realtime data:\", error)"
        },
        {
          "url": "presence",
          "method": "ON",
          "methodName": "on",
          "parameters": ", { event: \"sync\" }, (",
          "file": "useRealtime.js",
          "fullCall": "on(\"presence\", { event: \"sync\" }, ()"
        },
        {
          "url": "presence",
          "method": "ON",
          "methodName": "on",
          "parameters": ", { event: \"join\" }, ({ key, newPresences }",
          "file": "useRealtime.js",
          "fullCall": "on(\"presence\", { event: \"join\" }, ({ key, newPresences })"
        },
        {
          "url": "presence",
          "method": "ON",
          "methodName": "on",
          "parameters": ", { event: \"leave\" }, ({ key, leftPresences }",
          "file": "useRealtime.js",
          "fullCall": "on(\"presence\", { event: \"leave\" }, ({ key, leftPresences })"
        },
        {
          "url": "✅ Subscribed to ${channelName}",
          "method": "LOG",
          "methodName": "log",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "log(`✅ Subscribed to ${channelName}`)"
        },
        {
          "url": "❌ Subscription error for ${channelName}",
          "method": "ERROR",
          "methodName": "error",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "error(`❌ Subscription error for ${channelName}`)"
        },
        {
          "url": "Failed to create subscription ${channelName}:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "useRealtime.js",
          "fullCall": "error(`Failed to create subscription ${channelName}:`, error)"
        },
        {
          "url": "🔌 Unsubscribed from ${channelName}",
          "method": "LOG",
          "methodName": "log",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "log(`🔌 Unsubscribed from ${channelName}`)"
        },
        {
          "url": "Chat subscription error:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "useRealtime.js",
          "fullCall": "error(\"Chat subscription error:\", error)"
        },
        {
          "url": "Presence sync:",
          "method": "LOG",
          "methodName": "log",
          "parameters": ", state",
          "file": "useRealtime.js",
          "fullCall": "log(\"Presence sync:\", state)"
        },
        {
          "url": "User joined:",
          "method": "LOG",
          "methodName": "log",
          "parameters": ", key, newPresences",
          "file": "useRealtime.js",
          "fullCall": "log(\"User joined:\", key, newPresences)"
        },
        {
          "url": "User left:",
          "method": "LOG",
          "methodName": "log",
          "parameters": ", key, leftPresences",
          "file": "useRealtime.js",
          "fullCall": "log(\"User left:\", key, leftPresences)"
        },
        {
          "url": "chat:${activeHouseholdId}",
          "method": "REMOVESUBSCRIPTION",
          "methodName": "removeSubscription",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "removeSubscription(`chat:${activeHouseholdId}`)"
        },
        {
          "url": "tasks:${activeHouseholdId}",
          "method": "REMOVESUBSCRIPTION",
          "methodName": "removeSubscription",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "removeSubscription(`tasks:${activeHouseholdId}`)"
        },
        {
          "url": "expenses:${activeHouseholdId}",
          "method": "REMOVESUBSCRIPTION",
          "methodName": "removeSubscription",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "removeSubscription(`expenses:${activeHouseholdId}`)"
        },
        {
          "url": "presence:${activeHouseholdId}",
          "method": "REMOVESUBSCRIPTION",
          "methodName": "removeSubscription",
          "parameters": "",
          "file": "useRealtime.js",
          "fullCall": "removeSubscription(`presence:${activeHouseholdId}`)"
        }
      ],
      "returnValues": [
        {},
        {
          "pages": "array",
          "data": "array"
        },
        {
          "pages": "unknown",
          "data": "unknown"
        },
        {
          "pages": "unknown",
          "data": "unknown"
        },
        {
          "data": "array"
        },
        {
          "data": "object"
        },
        {
          "isEnabled": "unknown",
          "getActiveSubscriptions": "unknown",
          "reconnect": "unknown"
        }
      ],
      "callableMethods": [
        "channel",
        "subscription",
        "old",
        "firstPage",
        "newMessage",
        "page",
        "newNotification",
        "1",
        "isConnected",
        "connectionError",
        "createSubscription",
        "removeSubscription",
        "subscribeToChatMessages",
        "subscribeToNotifications",
        "subscribeToTaskUpdates",
        "subscribeToExpenseUpdates",
        "subscribeToPresence",
        "reconnect",
        {
          "name": "useRealtime",
          "definition": "const useRealtime = () =>"
        }
      ],
      "stateVariables": [
        {
          "state": "isConnected",
          "setter": "setIsConnected"
        },
        {
          "state": "connectionError",
          "setter": "setConnectionError"
        }
      ]
    }
  },
  "contexts": {
    "AuthContext.jsx": {
      "functions": [
        {
          "name": "AuthProvider",
          "signature": "(",
          "type": "export",
          "file": "AuthContext.jsx",
          "fullMatch": "export const AuthProvider = ("
        },
        {
          "name": "useAuth",
          "signature": "() =>",
          "type": "export",
          "file": "AuthContext.jsx",
          "fullMatch": "export const useAuth = () =>"
        },
        {
          "name": "login",
          "signature": "async (token, user)",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const login = async (token, user) =>"
        },
        {
          "name": "logout",
          "signature": "async ()",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const logout = async () =>"
        },
        {
          "name": "updateProfile",
          "signature": "async (data)",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const updateProfile = async (data) =>"
        },
        {
          "name": "uploadAvatar",
          "signature": "async (file)",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const uploadAvatar = async (file) =>"
        },
        {
          "name": "validateInvite",
          "signature": "async (inviteCode)",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const validateInvite = async (inviteCode) =>"
        },
        {
          "name": "joinHousehold",
          "signature": "async (inviteCode)",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const joinHousehold = async (inviteCode) =>"
        },
        {
          "name": "refreshToken",
          "signature": "async ()",
          "type": "async",
          "file": "AuthContext.jsx",
          "fullMatch": "const refreshToken = async () =>"
        },
        {
          "name": "authReducer",
          "signature": "(state, action)",
          "type": "arrow",
          "file": "AuthContext.jsx",
          "fullMatch": "const authReducer = (state, action) =>"
        },
        {
          "name": "AuthProvider",
          "signature": "({ children })",
          "type": "arrow",
          "file": "AuthContext.jsx",
          "fullMatch": "export const AuthProvider = ({ children }) =>"
        },
        {
          "name": "useAuth",
          "signature": "()",
          "type": "arrow",
          "file": "AuthContext.jsx",
          "fullMatch": "export const useAuth = () =>"
        }
      ],
      "endpoints": [
        {
          "url": "Logout API call failed:",
          "method": "WARN",
          "methodName": "warn",
          "parameters": ", error",
          "file": "AuthContext.jsx",
          "fullCall": "warn(\"Logout API call failed:\", error)"
        },
        {
          "url": "Token refresh failed:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "AuthContext.jsx",
          "fullCall": "error(\"Token refresh failed:\", error)"
        },
        {
          "url": "useAuth must be used within an AuthProvider",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "AuthContext.jsx",
          "fullCall": "Error(\"useAuth must be used within an AuthProvider\")"
        }
      ],
      "contextMethods": {
        "providerMethods": [
          {
            "name": "AuthProvider",
            "signature": "(",
            "type": "export",
            "file": "AuthContext.jsx",
            "fullMatch": "export const AuthProvider = ("
          },
          {
            "name": "useAuth",
            "signature": "() =>",
            "type": "export",
            "file": "AuthContext.jsx",
            "fullMatch": "export const useAuth = () =>"
          },
          {
            "name": "login",
            "signature": "async (token, user)",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const login = async (token, user) =>"
          },
          {
            "name": "logout",
            "signature": "async ()",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const logout = async () =>"
          },
          {
            "name": "updateProfile",
            "signature": "async (data)",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const updateProfile = async (data) =>"
          },
          {
            "name": "uploadAvatar",
            "signature": "async (file)",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const uploadAvatar = async (file) =>"
          },
          {
            "name": "validateInvite",
            "signature": "async (inviteCode)",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const validateInvite = async (inviteCode) =>"
          },
          {
            "name": "joinHousehold",
            "signature": "async (inviteCode)",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const joinHousehold = async (inviteCode) =>"
          },
          {
            "name": "refreshToken",
            "signature": "async ()",
            "type": "async",
            "file": "AuthContext.jsx",
            "fullMatch": "const refreshToken = async () =>"
          },
          {
            "name": "authReducer",
            "signature": "(state, action)",
            "type": "arrow",
            "file": "AuthContext.jsx",
            "fullMatch": "const authReducer = (state, action) =>"
          },
          {
            "name": "AuthProvider",
            "signature": "({ children })",
            "type": "arrow",
            "file": "AuthContext.jsx",
            "fullMatch": "export const AuthProvider = ({ children }) =>"
          },
          {
            "name": "useAuth",
            "signature": "()",
            "type": "arrow",
            "file": "AuthContext.jsx",
            "fullMatch": "export const useAuth = () =>"
          }
        ],
        "contextValue": [],
        "actions": [
          "SET_USER",
          "SET_ERROR",
          "SET_USER",
          "LOGOUT",
          "SET_USER",
          "SET_ERROR",
          "SET_LOADING",
          "SET_USER",
          "LOGOUT"
        ],
        "state": []
      }
    },
    "HouseholdContext.jsx": {
      "functions": [
        {
          "name": "HouseholdProvider",
          "signature": "(",
          "type": "export",
          "file": "HouseholdContext.jsx",
          "fullMatch": "export const HouseholdProvider = ("
        },
        {
          "name": "useHousehold",
          "signature": "() =>",
          "type": "export",
          "file": "HouseholdContext.jsx",
          "fullMatch": "export const useHousehold = () =>"
        },
        {
          "name": "createHousehold",
          "signature": "async (data)",
          "type": "async",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const createHousehold = async (data) =>"
        },
        {
          "name": "updateHousehold",
          "signature": "async (data)",
          "type": "async",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const updateHousehold = async (data) =>"
        },
        {
          "name": "deleteHousehold",
          "signature": "async (householdId = activeHouseholdId)",
          "type": "async",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const deleteHousehold = async (householdId = activeHouseholdId) =>"
        },
        {
          "name": "leaveHousehold",
          "signature": "async (householdId = activeHouseholdId)",
          "type": "async",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const leaveHousehold = async (householdId = activeHouseholdId) =>"
        },
        {
          "name": "removeMember",
          "signature": "async (userId)",
          "type": "async",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const removeMember = async (userId) =>"
        },
        {
          "name": "generateInvite",
          "signature": "async ()",
          "type": "async",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const generateInvite = async () =>"
        },
        {
          "name": "householdReducer",
          "signature": "(state, action)",
          "type": "arrow",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const householdReducer = (state, action) =>"
        },
        {
          "name": "HouseholdProvider",
          "signature": "({ children })",
          "type": "arrow",
          "file": "HouseholdContext.jsx",
          "fullMatch": "export const HouseholdProvider = ({ children }) =>"
        },
        {
          "name": "switchHousehold",
          "signature": "(householdId)",
          "type": "arrow",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const switchHousehold = (householdId) =>"
        },
        {
          "name": "clearError",
          "signature": "()",
          "type": "arrow",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const clearError = () =>"
        },
        {
          "name": "handleStorageChange",
          "signature": "(e)",
          "type": "arrow",
          "file": "HouseholdContext.jsx",
          "fullMatch": "const handleStorageChange = (e) =>"
        },
        {
          "name": "useHousehold",
          "signature": "()",
          "type": "arrow",
          "file": "HouseholdContext.jsx",
          "fullMatch": "export const useHousehold = () =>"
        }
      ],
      "endpoints": [
        {
          "url": "No active household",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "HouseholdContext.jsx",
          "fullCall": "Error(\"No active household\")"
        },
        {
          "url": "No household specified",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "HouseholdContext.jsx",
          "fullCall": "Error(\"No household specified\")"
        },
        {
          "url": "No household specified",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "HouseholdContext.jsx",
          "fullCall": "Error(\"No household specified\")"
        },
        {
          "url": "No active household",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "HouseholdContext.jsx",
          "fullCall": "Error(\"No active household\")"
        },
        {
          "url": "No active household",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "HouseholdContext.jsx",
          "fullCall": "Error(\"No active household\")"
        },
        {
          "url": "storage",
          "method": "ADDEVENTLISTENER",
          "methodName": "addEventListener",
          "parameters": ", handleStorageChange",
          "file": "HouseholdContext.jsx",
          "fullCall": "addEventListener(\"storage\", handleStorageChange)"
        },
        {
          "url": "storage",
          "method": "REMOVEEVENTLISTENER",
          "methodName": "removeEventListener",
          "parameters": ", handleStorageChange",
          "file": "HouseholdContext.jsx",
          "fullCall": "removeEventListener(\"storage\", handleStorageChange)"
        },
        {
          "url": "useHousehold must be used within a HouseholdProvider",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "HouseholdContext.jsx",
          "fullCall": "Error(\"useHousehold must be used within a HouseholdProvider\")"
        }
      ],
      "contextMethods": {
        "providerMethods": [
          {
            "name": "HouseholdProvider",
            "signature": "(",
            "type": "export",
            "file": "HouseholdContext.jsx",
            "fullMatch": "export const HouseholdProvider = ("
          },
          {
            "name": "useHousehold",
            "signature": "() =>",
            "type": "export",
            "file": "HouseholdContext.jsx",
            "fullMatch": "export const useHousehold = () =>"
          },
          {
            "name": "createHousehold",
            "signature": "async (data)",
            "type": "async",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const createHousehold = async (data) =>"
          },
          {
            "name": "updateHousehold",
            "signature": "async (data)",
            "type": "async",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const updateHousehold = async (data) =>"
          },
          {
            "name": "deleteHousehold",
            "signature": "async (householdId = activeHouseholdId)",
            "type": "async",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const deleteHousehold = async (householdId = activeHouseholdId) =>"
          },
          {
            "name": "leaveHousehold",
            "signature": "async (householdId = activeHouseholdId)",
            "type": "async",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const leaveHousehold = async (householdId = activeHouseholdId) =>"
          },
          {
            "name": "removeMember",
            "signature": "async (userId)",
            "type": "async",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const removeMember = async (userId) =>"
          },
          {
            "name": "generateInvite",
            "signature": "async ()",
            "type": "async",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const generateInvite = async () =>"
          },
          {
            "name": "householdReducer",
            "signature": "(state, action)",
            "type": "arrow",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const householdReducer = (state, action) =>"
          },
          {
            "name": "HouseholdProvider",
            "signature": "({ children })",
            "type": "arrow",
            "file": "HouseholdContext.jsx",
            "fullMatch": "export const HouseholdProvider = ({ children }) =>"
          },
          {
            "name": "switchHousehold",
            "signature": "(householdId)",
            "type": "arrow",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const switchHousehold = (householdId) =>"
          },
          {
            "name": "clearError",
            "signature": "()",
            "type": "arrow",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const clearError = () =>"
          },
          {
            "name": "handleStorageChange",
            "signature": "(e)",
            "type": "arrow",
            "file": "HouseholdContext.jsx",
            "fullMatch": "const handleStorageChange = (e) =>"
          },
          {
            "name": "useHousehold",
            "signature": "()",
            "type": "arrow",
            "file": "HouseholdContext.jsx",
            "fullMatch": "export const useHousehold = () =>"
          }
        ],
        "contextValue": [],
        "actions": [
          "SET_ERROR",
          "SET_HOUSEHOLDS",
          "SET_ACTIVE_HOUSEHOLD",
          "SET_MEMBERS",
          "SET_DASHBOARD_DATA",
          "SET_LOADING",
          "SET_ERROR",
          "CLEAR_ERROR"
        ],
        "state": []
      }
    },
    "NotificationContext.jsx": {
      "functions": [
        {
          "name": "NotificationProvider",
          "signature": "(",
          "type": "export",
          "file": "NotificationContext.jsx",
          "fullMatch": "export const NotificationProvider = ("
        },
        {
          "name": "useNotifications",
          "signature": "() =>",
          "type": "export",
          "file": "NotificationContext.jsx",
          "fullMatch": "export const useNotifications = () =>"
        },
        {
          "name": "markAsRead",
          "signature": "async (notificationId)",
          "type": "async",
          "file": "NotificationContext.jsx",
          "fullMatch": "const markAsRead = async (notificationId) =>"
        },
        {
          "name": "markAllAsRead",
          "signature": "async ()",
          "type": "async",
          "file": "NotificationContext.jsx",
          "fullMatch": "const markAllAsRead = async () =>"
        },
        {
          "name": "deleteNotification",
          "signature": "async (notificationId)",
          "type": "async",
          "file": "NotificationContext.jsx",
          "fullMatch": "const deleteNotification = async (notificationId) =>"
        },
        {
          "name": "batchMarkAsRead",
          "signature": "async (notificationIds)",
          "type": "async",
          "file": "NotificationContext.jsx",
          "fullMatch": "const batchMarkAsRead = async (notificationIds) =>"
        },
        {
          "name": "updatePreferences",
          "signature": "async (preferences)",
          "type": "async",
          "file": "NotificationContext.jsx",
          "fullMatch": "const updatePreferences = async (preferences) =>"
        },
        {
          "name": "requestNotificationPermission",
          "signature": "async ()",
          "type": "async",
          "file": "NotificationContext.jsx",
          "fullMatch": "const requestNotificationPermission = async () =>"
        },
        {
          "name": "notificationReducer",
          "signature": "(state, action)",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "const notificationReducer = (state, action) =>"
        },
        {
          "name": "NotificationProvider",
          "signature": "({ children })",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "export const NotificationProvider = ({ children }) =>"
        },
        {
          "name": "onopen",
          "signature": "()",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "onopen = () =>"
        },
        {
          "name": "onmessage",
          "signature": "(event)",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "onmessage = (event) =>"
        },
        {
          "name": "onclose",
          "signature": "(event)",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "onclose = (event) =>"
        },
        {
          "name": "onerror",
          "signature": "(error)",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "onerror = (error) =>"
        },
        {
          "name": "clearError",
          "signature": "()",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "const clearError = () =>"
        },
        {
          "name": "useNotifications",
          "signature": "()",
          "type": "arrow",
          "file": "NotificationContext.jsx",
          "fullMatch": "export const useNotifications = () =>"
        }
      ],
      "endpoints": [
        {
          "url": "Failed to mark notification as read:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "NotificationContext.jsx",
          "fullCall": "error(\"Failed to mark notification as read:\", error)"
        },
        {
          "url": "${wsUrl}?token=${token}&user_id=${user.id}",
          "method": "WEBSOCKET",
          "methodName": "WebSocket",
          "parameters": "",
          "file": "NotificationContext.jsx",
          "fullCall": "WebSocket(`${wsUrl}?token=${token}&user_id=${user.id}`)"
        },
        {
          "url": "🔗 WebSocket connected",
          "method": "LOG",
          "methodName": "log",
          "parameters": "",
          "file": "NotificationContext.jsx",
          "fullCall": "log(\"🔗 WebSocket connected\")"
        },
        {
          "url": "Unknown WebSocket message type:",
          "method": "WARN",
          "methodName": "warn",
          "parameters": ", message.type",
          "file": "NotificationContext.jsx",
          "fullCall": "warn(\"Unknown WebSocket message type:\", message.type)"
        },
        {
          "url": "Error parsing WebSocket message:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "NotificationContext.jsx",
          "fullCall": "error(\"Error parsing WebSocket message:\", error)"
        },
        {
          "url": "🔌 WebSocket disconnected:",
          "method": "LOG",
          "methodName": "log",
          "parameters": ", event.code, event.reason",
          "file": "NotificationContext.jsx",
          "fullCall": "log(\"🔌 WebSocket disconnected:\", event.code, event.reason)"
        },
        {
          "url": "WebSocket error:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "NotificationContext.jsx",
          "fullCall": "error(\"WebSocket error:\", error)"
        },
        {
          "url": "Failed to create WebSocket connection:",
          "method": "ERROR",
          "methodName": "error",
          "parameters": ", error",
          "file": "NotificationContext.jsx",
          "fullCall": "error(\"Failed to create WebSocket connection:\", error)"
        },
        {
          "url": "Notification",
          "method": "IF",
          "methodName": "if",
          "parameters": "in window",
          "file": "NotificationContext.jsx",
          "fullCall": "if (\"Notification\" in window)"
        },
        {
          "url": "useNotifications must be used within a NotificationProvider",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "NotificationContext.jsx",
          "fullCall": "Error(\"useNotifications must be used within a NotificationProvider\")"
        }
      ],
      "contextMethods": {
        "providerMethods": [
          {
            "name": "NotificationProvider",
            "signature": "(",
            "type": "export",
            "file": "NotificationContext.jsx",
            "fullMatch": "export const NotificationProvider = ("
          },
          {
            "name": "useNotifications",
            "signature": "() =>",
            "type": "export",
            "file": "NotificationContext.jsx",
            "fullMatch": "export const useNotifications = () =>"
          },
          {
            "name": "markAsRead",
            "signature": "async (notificationId)",
            "type": "async",
            "file": "NotificationContext.jsx",
            "fullMatch": "const markAsRead = async (notificationId) =>"
          },
          {
            "name": "markAllAsRead",
            "signature": "async ()",
            "type": "async",
            "file": "NotificationContext.jsx",
            "fullMatch": "const markAllAsRead = async () =>"
          },
          {
            "name": "deleteNotification",
            "signature": "async (notificationId)",
            "type": "async",
            "file": "NotificationContext.jsx",
            "fullMatch": "const deleteNotification = async (notificationId) =>"
          },
          {
            "name": "batchMarkAsRead",
            "signature": "async (notificationIds)",
            "type": "async",
            "file": "NotificationContext.jsx",
            "fullMatch": "const batchMarkAsRead = async (notificationIds) =>"
          },
          {
            "name": "updatePreferences",
            "signature": "async (preferences)",
            "type": "async",
            "file": "NotificationContext.jsx",
            "fullMatch": "const updatePreferences = async (preferences) =>"
          },
          {
            "name": "requestNotificationPermission",
            "signature": "async ()",
            "type": "async",
            "file": "NotificationContext.jsx",
            "fullMatch": "const requestNotificationPermission = async () =>"
          },
          {
            "name": "notificationReducer",
            "signature": "(state, action)",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "const notificationReducer = (state, action) =>"
          },
          {
            "name": "NotificationProvider",
            "signature": "({ children })",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "export const NotificationProvider = ({ children }) =>"
          },
          {
            "name": "onopen",
            "signature": "()",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "onopen = () =>"
          },
          {
            "name": "onmessage",
            "signature": "(event)",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "onmessage = (event) =>"
          },
          {
            "name": "onclose",
            "signature": "(event)",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "onclose = (event) =>"
          },
          {
            "name": "onerror",
            "signature": "(error)",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "onerror = (error) =>"
          },
          {
            "name": "clearError",
            "signature": "()",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "const clearError = () =>"
          },
          {
            "name": "useNotifications",
            "signature": "()",
            "type": "arrow",
            "file": "NotificationContext.jsx",
            "fullMatch": "export const useNotifications = () =>"
          }
        ],
        "contextValue": [],
        "actions": [
          "SET_ERROR",
          "MARK_READ_OPTIMISTIC",
          "MARK_READ_SUCCESS",
          "MARK_READ_ERROR",
          "MARK_ALL_READ_OPTIMISTIC",
          "SET_NOTIFICATIONS",
          "MARK_ALL_READ_ERROR",
          "REMOVE_NOTIFICATION",
          "SET_NOTIFICATIONS",
          "SET_PREFERENCES",
          "ADD_NOTIFICATION",
          "UPDATE_NOTIFICATION",
          "REMOVE_NOTIFICATION",
          "SET_NOTIFICATIONS",
          "SET_UNREAD_COUNT",
          "SET_PREFERENCES",
          "CLEAR_ERROR"
        ],
        "state": []
      }
    },
    "ThemeContext.jsx": {
      "functions": [
        {
          "name": "ThemeProvider",
          "signature": "(",
          "type": "export",
          "file": "ThemeContext.jsx",
          "fullMatch": "export const ThemeProvider = ("
        },
        {
          "name": "useTheme",
          "signature": "() =>",
          "type": "export",
          "file": "ThemeContext.jsx",
          "fullMatch": "export const useTheme = () =>"
        },
        {
          "name": "themeReducer",
          "signature": "(state, action)",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const themeReducer = (state, action) =>"
        },
        {
          "name": "ThemeProvider",
          "signature": "({ children })",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "export const ThemeProvider = ({ children }) =>"
        },
        {
          "name": "handleChange",
          "signature": "(e)",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const handleChange = (e) =>"
        },
        {
          "name": "handleChange",
          "signature": "(e)",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const handleChange = (e) =>"
        },
        {
          "name": "setTheme",
          "signature": "(theme)",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const setTheme = (theme) =>"
        },
        {
          "name": "toggleTheme",
          "signature": "()",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const toggleTheme = () =>"
        },
        {
          "name": "setHighContrastMode",
          "signature": "(enabled)",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const setHighContrastMode = (enabled) =>"
        },
        {
          "name": "setReducedMotionMode",
          "signature": "(enabled)",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const setReducedMotionMode = (enabled) =>"
        },
        {
          "name": "getEffectiveTheme",
          "signature": "()",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "const getEffectiveTheme = () =>"
        },
        {
          "name": "useTheme",
          "signature": "()",
          "type": "arrow",
          "file": "ThemeContext.jsx",
          "fullMatch": "export const useTheme = () =>"
        }
      ],
      "endpoints": [
        {
          "url": "(prefers-color-scheme: dark)",
          "method": "MATCHMEDIA",
          "methodName": "matchMedia",
          "parameters": "",
          "file": "ThemeContext.jsx",
          "fullCall": "matchMedia(\"(prefers-color-scheme: dark)\")"
        },
        {
          "url": "change",
          "method": "ADDEVENTLISTENER",
          "methodName": "addEventListener",
          "parameters": ", handleChange",
          "file": "ThemeContext.jsx",
          "fullCall": "addEventListener(\"change\", handleChange)"
        },
        {
          "url": "change",
          "method": "REMOVEEVENTLISTENER",
          "methodName": "removeEventListener",
          "parameters": ", handleChange",
          "file": "ThemeContext.jsx",
          "fullCall": "removeEventListener(\"change\", handleChange)"
        },
        {
          "url": "(prefers-reduced-motion: reduce)",
          "method": "MATCHMEDIA",
          "methodName": "matchMedia",
          "parameters": "",
          "file": "ThemeContext.jsx",
          "fullCall": "matchMedia(\"(prefers-reduced-motion: reduce)\")"
        },
        {
          "url": "change",
          "method": "ADDEVENTLISTENER",
          "methodName": "addEventListener",
          "parameters": ", handleChange",
          "file": "ThemeContext.jsx",
          "fullCall": "addEventListener(\"change\", handleChange)"
        },
        {
          "url": "change",
          "method": "REMOVEEVENTLISTENER",
          "methodName": "removeEventListener",
          "parameters": ", handleChange",
          "file": "ThemeContext.jsx",
          "fullCall": "removeEventListener(\"change\", handleChange)"
        },
        {
          "url": "light",
          "method": "REMOVE",
          "methodName": "remove",
          "parameters": ", \"dark\", \"high-contrast\", \"reduced-motion\"",
          "file": "ThemeContext.jsx",
          "fullCall": "remove(\"light\", \"dark\", \"high-contrast\", \"reduced-motion\")"
        },
        {
          "url": "high-contrast",
          "method": "ADD",
          "methodName": "add",
          "parameters": "",
          "file": "ThemeContext.jsx",
          "fullCall": "add(\"high-contrast\")"
        },
        {
          "url": "reduced-motion",
          "method": "ADD",
          "methodName": "add",
          "parameters": "",
          "file": "ThemeContext.jsx",
          "fullCall": "add(\"reduced-motion\")"
        },
        {
          "url": "meta[name=",
          "method": "QUERYSELECTOR",
          "methodName": "querySelector",
          "parameters": "theme-color\"]'",
          "file": "ThemeContext.jsx",
          "fullCall": "querySelector('meta[name=\"theme-color\"]')"
        },
        {
          "url": "content",
          "method": "SETATTRIBUTE",
          "methodName": "setAttribute",
          "parameters": ", effectiveTheme === \"dark\" ? \"#0f172a\" : \"#ffffff\"",
          "file": "ThemeContext.jsx",
          "fullCall": "setAttribute(\"content\", effectiveTheme === \"dark\" ? \"#0f172a\" : \"#ffffff\")"
        },
        {
          "url": "useTheme must be used within a ThemeProvider",
          "method": "ERROR",
          "methodName": "Error",
          "parameters": "",
          "file": "ThemeContext.jsx",
          "fullCall": "Error(\"useTheme must be used within a ThemeProvider\")"
        }
      ],
      "contextMethods": {
        "providerMethods": [
          {
            "name": "ThemeProvider",
            "signature": "(",
            "type": "export",
            "file": "ThemeContext.jsx",
            "fullMatch": "export const ThemeProvider = ("
          },
          {
            "name": "useTheme",
            "signature": "() =>",
            "type": "export",
            "file": "ThemeContext.jsx",
            "fullMatch": "export const useTheme = () =>"
          },
          {
            "name": "themeReducer",
            "signature": "(state, action)",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const themeReducer = (state, action) =>"
          },
          {
            "name": "ThemeProvider",
            "signature": "({ children })",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "export const ThemeProvider = ({ children }) =>"
          },
          {
            "name": "handleChange",
            "signature": "(e)",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const handleChange = (e) =>"
          },
          {
            "name": "handleChange",
            "signature": "(e)",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const handleChange = (e) =>"
          },
          {
            "name": "setTheme",
            "signature": "(theme)",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const setTheme = (theme) =>"
          },
          {
            "name": "toggleTheme",
            "signature": "()",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const toggleTheme = () =>"
          },
          {
            "name": "setHighContrastMode",
            "signature": "(enabled)",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const setHighContrastMode = (enabled) =>"
          },
          {
            "name": "setReducedMotionMode",
            "signature": "(enabled)",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const setReducedMotionMode = (enabled) =>"
          },
          {
            "name": "getEffectiveTheme",
            "signature": "()",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "const getEffectiveTheme = () =>"
          },
          {
            "name": "useTheme",
            "signature": "()",
            "type": "arrow",
            "file": "ThemeContext.jsx",
            "fullMatch": "export const useTheme = () =>"
          }
        ],
        "contextValue": [],
        "actions": [
          "SET_SYSTEM_THEME",
          "SET_SYSTEM_THEME",
          "SET_REDUCED_MOTION",
          "SET_REDUCED_MOTION",
          "SET_THEME",
          "SET_HIGH_CONTRAST",
          "SET_REDUCED_MOTION"
        ],
        "state": []
      }
    }
  }
}